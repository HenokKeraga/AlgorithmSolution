# AlgorithmSolution

113. Path Sum II
Medium

1682

62

Add to List

Share
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
      List<List<Integer>>  totalResult= new ArrayList<>();
        List<Integer> result= new ArrayList<>();
        
        helper(root,sum,totalResult,result);
        
        return totalResult;
    }
    
    public void helper(TreeNode root, int sum,List<List<Integer>>  totalResult, List<Integer> result){
       
        if(root==null){
           
             return ;
        }
        result.add(root.val);
         
        if(root.left==null&&root.right==null&&sum==root.val){
            
            
            totalResult.add(result);
            
        }
        
        helper(root.left,sum-root.val,totalResult,new ArrayList<>(result));
        helper(root.right,sum-root.val,totalResult,new ArrayList<>(result));
    }
}
