# AlgorithmSolution

437. Path Sum III
Easy

3323

272

Add to List

Share
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
       int count=0;
        
        if(root==null)
            return 0;
        
        count=helper(root,sum,new Integer(0));
        return count+pathSum(root.left,sum)+pathSum(root.right,sum);
    
    }
    public int helper(TreeNode root, int sum,Integer total){
        if(root==null)
            return 0;
        int count=0;
        total+=root.val;
        if(total==sum)
            count=1;
        count+=helper(root.left,sum,total);
        count+=helper(root.right,sum,total);
        
        return count;
    }
    
   
 
    
}
