# AlgorithmSolution

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null)
         return true;
         return symmetry(root.left,root.right);
    }
    
    public boolean symmetry(TreeNode leftSt,TreeNode rightSt){
        if(leftSt==null&&rightSt==null)
            return true;
         else if(leftSt!=null&&rightSt!=null) {
             if((leftSt.val==rightSt.val) && symmetry(leftSt.left,rightSt.right) && symmetry(leftSt.right,rightSt.left)){
                 return true;
             }
         
            
        }
        return false;    
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null)
            return true;
        return helper(root.left,root.right);
    }
    public boolean helper(TreeNode lNode,TreeNode rNode ){
        if(lNode==null&&rNode==null)
            return true;
        if((lNode==null&&rNode!=null)||(lNode!=null&&rNode==null))
            return false;
        if(lNode!=null&&rNode!=null){
            if(lNode.val!=rNode.val)
                return false;
        }
        return helper(lNode.left,rNode.right)&& helper(lNode.right,rNode.left);
        
    }
}
